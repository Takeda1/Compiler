
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Apr 24 15:56:53 EDT 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Tue Apr 24 15:56:53 EDT 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\005\000\002\005\006\000\002\005\010" +
    "\000\002\006\002\000\002\006\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\013\000\002\010\005\000\002" +
    "\011\007\000\002\013\002\000\002\013\004\000\002\014" +
    "\005\000\002\015\002\000\002\015\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\005\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\011\000\002" +
    "\012\007\000\002\012\006\000\002\012\010\000\002\012" +
    "\012\000\002\012\015\000\002\012\013\000\002\012\011" +
    "\000\002\022\002\000\002\022\011\000\002\022\007\000" +
    "\002\021\002\000\002\021\011\000\002\020\002\000\002" +
    "\020\004\000\002\017\002\000\002\017\005\000\002\016" +
    "\004\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\006\006\001\002\000\004\002\232\001" +
    "\002\000\006\002\uffff\006\006\001\002\000\004\052\007" +
    "\001\002\000\006\013\012\036\011\001\002\000\006\002" +
    "\ufffe\006\ufffe\001\002\000\006\037\ufffb\053\020\001\002" +
    "\000\004\052\013\001\002\000\004\036\014\001\002\000" +
    "\006\037\ufffb\053\020\001\002\000\004\040\ufff8\001\002" +
    "\000\004\040\224\001\002\000\004\037\222\001\002\000" +
    "\006\030\022\034\023\001\002\000\004\040\ufff9\001\002" +
    "\000\004\052\217\001\002\000\006\035\ufff4\053\025\001" +
    "\002\000\006\031\213\035\ufff1\001\002\000\004\030\211" +
    "\001\002\000\004\035\027\001\002\000\004\030\030\001" +
    "\002\000\004\052\031\001\002\000\004\036\032\001\002" +
    "\000\040\004\045\011\042\014\044\015\051\020\036\021" +
    "\050\024\034\025\040\026\043\034\052\036\035\041\041" +
    "\053\046\054\037\055\033\001\002\000\052\007\uffeb\010" +
    "\uffeb\012\uffeb\016\uffeb\017\uffeb\022\uffeb\023\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\035\uffeb\037\uffeb\040\uffeb\042\uffeb\043" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002" +
    "\000\040\004\045\011\042\014\044\015\051\020\036\021" +
    "\050\024\034\025\040\026\043\034\052\036\035\041\041" +
    "\053\046\054\037\055\033\001\002\000\040\004\045\011" +
    "\042\014\044\015\051\020\036\021\050\024\034\025\040" +
    "\026\043\034\052\036\035\041\041\053\046\054\037\055" +
    "\033\001\002\000\004\052\177\001\002\000\052\007\uffec" +
    "\010\uffec\012\uffec\016\uffec\017\uffec\022\uffec\023\uffec\031" +
    "\uffec\032\uffec\033\uffec\035\uffec\037\uffec\040\uffec\042\uffec" +
    "\043\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\001" +
    "\002\000\052\007\uffef\010\uffef\012\uffef\016\uffef\017\uffef" +
    "\022\uffef\023\uffef\031\uffef\032\uffef\033\uffef\035\uffef\037" +
    "\uffef\040\uffef\042\uffef\043\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\001\002\000\040\004\045\011\042\014" +
    "\044\015\051\020\036\021\050\024\034\025\040\026\043" +
    "\034\052\036\035\041\041\053\046\054\037\055\033\001" +
    "\002\000\040\004\045\011\042\014\044\015\051\020\036" +
    "\021\050\024\034\025\040\026\043\034\052\036\035\041" +
    "\041\053\046\054\037\055\033\001\002\000\052\007\uffee" +
    "\010\uffee\012\uffee\016\uffee\017\uffee\022\uffee\023\uffee\031" +
    "\uffee\032\uffee\033\uffee\035\uffee\037\uffee\040\uffee\042\uffee" +
    "\043\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\001" +
    "\002\000\040\004\045\011\042\014\044\015\051\020\036" +
    "\021\050\024\034\025\040\026\043\034\052\036\035\041" +
    "\041\053\046\054\037\055\033\001\002\000\040\004\045" +
    "\011\042\014\044\015\051\020\036\021\050\024\034\025" +
    "\040\026\043\034\052\036\035\041\041\053\046\054\037" +
    "\055\033\001\002\000\056\007\uffea\010\uffea\012\uffea\016" +
    "\uffea\017\uffea\022\uffea\023\uffea\027\142\031\uffea\032\uffea" +
    "\033\uffea\034\141\035\uffea\037\uffea\040\uffea\042\uffea\043" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\001\002" +
    "\000\026\032\060\033\062\037\140\042\065\043\057\045" +
    "\064\046\055\047\063\050\056\051\054\001\002\000\040" +
    "\004\045\011\042\014\044\015\051\020\036\021\050\024" +
    "\034\025\040\026\043\034\052\036\035\041\041\053\046" +
    "\054\037\055\033\001\002\000\004\053\114\001\002\000" +
    "\040\004\045\011\042\014\044\015\051\020\036\021\050" +
    "\024\034\025\040\026\043\034\052\036\035\041\041\053" +
    "\046\054\037\055\033\001\002\000\026\032\060\033\062" +
    "\035\061\042\065\043\057\045\064\046\055\047\063\050" +
    "\056\051\054\001\002\000\040\004\045\011\042\014\044" +
    "\015\051\020\036\021\050\024\034\025\040\026\043\034" +
    "\052\036\035\041\041\053\046\054\037\055\033\001\002" +
    "\000\040\004\045\011\042\014\044\015\051\020\036\021" +
    "\050\024\034\025\040\026\043\034\052\036\035\041\041" +
    "\053\046\054\037\055\033\001\002\000\040\004\045\011" +
    "\042\014\044\015\051\020\036\021\050\024\034\025\040" +
    "\026\043\034\052\036\035\041\041\053\046\054\037\055" +
    "\033\001\002\000\040\004\045\011\042\014\044\015\051" +
    "\020\036\021\050\024\034\025\040\026\043\034\052\036" +
    "\035\041\041\053\046\054\037\055\033\001\002\000\004" +
    "\053\104\001\002\000\052\007\uffe9\010\uffe9\012\uffe9\016" +
    "\uffe9\017\uffe9\022\uffe9\023\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\035\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\001\002\000\004\052\071" +
    "\001\002\000\040\004\045\011\042\014\044\015\051\020" +
    "\036\021\050\024\034\025\040\026\043\034\052\036\035" +
    "\041\041\053\046\054\037\055\033\001\002\000\040\004" +
    "\045\011\042\014\044\015\051\020\036\021\050\024\034" +
    "\025\040\026\043\034\052\036\035\041\041\053\046\054" +
    "\037\055\033\001\002\000\040\004\045\011\042\014\044" +
    "\015\051\020\036\021\050\024\034\025\040\026\043\034" +
    "\052\036\035\041\041\053\046\054\037\055\033\001\002" +
    "\000\044\007\uffe0\010\uffe0\012\uffe0\016\uffe0\017\uffe0\022" +
    "\uffe0\023\uffe0\031\uffe0\032\060\033\062\035\uffe0\037\uffe0" +
    "\040\uffe0\046\055\047\063\050\056\051\054\001\002\000" +
    "\044\007\uffde\010\uffde\012\uffde\016\uffde\017\uffde\022\uffde" +
    "\023\uffde\031\uffde\032\060\033\062\035\uffde\037\uffde\040" +
    "\uffde\046\055\047\063\050\056\051\054\001\002\000\052" +
    "\007\uffe2\010\uffe2\012\uffe2\016\uffe2\017\uffe2\022\uffe2\023" +
    "\uffe2\031\uffe2\032\060\033\062\035\uffe2\037\uffe2\040\uffe2" +
    "\042\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\001\002\000\004\032\072\001\002\000\004\053\073" +
    "\001\002\000\004\034\074\001\002\000\042\004\045\011" +
    "\042\014\044\015\051\020\036\021\050\024\034\025\040" +
    "\026\043\034\052\035\uffcf\036\035\041\041\053\046\054" +
    "\037\055\033\001\002\000\004\035\103\001\002\000\030" +
    "\031\100\032\060\033\062\035\uffcd\042\065\043\057\045" +
    "\064\046\055\047\063\050\056\051\054\001\002\000\004" +
    "\035\uffce\001\002\000\040\004\045\011\042\014\044\015" +
    "\051\020\036\021\050\024\034\025\040\026\043\034\052" +
    "\036\035\041\041\053\046\054\037\055\033\001\002\000" +
    "\030\031\100\032\060\033\062\035\uffcd\042\065\043\057" +
    "\045\064\046\055\047\063\050\056\051\054\001\002\000" +
    "\004\035\uffcc\001\002\000\052\007\uffd8\010\uffd8\012\uffd8" +
    "\016\uffd8\017\uffd8\022\uffd8\023\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\035\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\051\uffd8\001\002\000\004\034" +
    "\105\001\002\000\042\004\045\011\042\014\044\015\051" +
    "\020\036\021\050\024\034\025\040\026\043\034\052\035" +
    "\uffcf\036\035\041\041\053\046\054\037\055\033\001\002" +
    "\000\004\035\107\001\002\000\052\007\uffd9\010\uffd9\012" +
    "\uffd9\016\uffd9\017\uffd9\022\uffd9\023\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\035\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\001\002\000\044" +
    "\007\uffdf\010\uffdf\012\uffdf\016\uffdf\017\uffdf\022\uffdf\023" +
    "\uffdf\031\uffdf\032\060\033\062\035\uffdf\037\uffdf\040\uffdf" +
    "\046\055\047\063\050\056\051\054\001\002\000\052\007" +
    "\uffe4\010\uffe4\012\uffe4\016\uffe4\017\uffe4\022\uffe4\023\uffe4" +
    "\031\uffe4\032\060\033\062\035\uffe4\037\uffe4\040\uffe4\042" +
    "\uffe4\043\uffe4\045\uffe4\046\055\047\063\050\uffe4\051\uffe4" +
    "\001\002\000\052\007\uffe1\010\uffe1\012\uffe1\016\uffe1\017" +
    "\uffe1\022\uffe1\023\uffe1\031\uffe1\032\060\033\062\035\uffe1" +
    "\037\uffe1\040\uffe1\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\001\002\000\052\007\uffe3\010\uffe3" +
    "\012\uffe3\016\uffe3\017\uffe3\022\uffe3\023\uffe3\031\uffe3\032" +
    "\060\033\062\035\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3" +
    "\045\uffe3\046\055\047\063\050\uffe3\051\uffe3\001\002\000" +
    "\004\030\115\001\002\000\004\052\116\001\002\000\010" +
    "\012\uffd4\027\121\031\117\001\002\000\004\053\130\001" +
    "\002\000\004\012\126\001\002\000\040\004\045\011\042" +
    "\014\044\015\051\020\036\021\050\024\034\025\040\026" +
    "\043\034\052\036\035\041\041\053\046\054\037\055\033" +
    "\001\002\000\030\012\uffd4\031\117\032\060\033\062\042" +
    "\065\043\057\045\064\046\055\047\063\050\056\051\054" +
    "\001\002\000\004\012\124\001\002\000\040\004\045\011" +
    "\042\014\044\015\051\020\036\021\050\024\034\025\040" +
    "\026\043\034\052\036\035\041\041\053\046\054\037\055" +
    "\033\001\002\000\052\007\uffd6\010\uffd6\012\uffd6\016\uffd6" +
    "\017\uffd6\022\uffd6\023\uffd6\031\uffd6\032\060\033\062\035" +
    "\uffd6\037\uffd6\040\uffd6\042\065\043\057\045\064\046\055" +
    "\047\063\050\056\051\054\001\002\000\040\004\045\011" +
    "\042\014\044\015\051\020\036\021\050\024\034\025\040" +
    "\026\043\034\052\036\035\041\041\053\046\054\037\055" +
    "\033\001\002\000\052\007\uffd5\010\uffd5\012\uffd5\016\uffd5" +
    "\017\uffd5\022\uffd5\023\uffd5\031\uffd5\032\060\033\062\035" +
    "\uffd5\037\uffd5\040\uffd5\042\065\043\057\045\064\046\055" +
    "\047\063\050\056\051\054\001\002\000\004\030\131\001" +
    "\002\000\004\052\132\001\002\000\010\012\uffd4\027\134" +
    "\031\117\001\002\000\004\012\uffd2\001\002\000\040\004" +
    "\045\011\042\014\044\015\051\020\036\021\050\024\034" +
    "\025\040\026\043\034\052\036\035\041\041\053\046\054" +
    "\037\055\033\001\002\000\030\012\uffd4\031\117\032\060" +
    "\033\062\042\065\043\057\045\064\046\055\047\063\050" +
    "\056\051\054\001\002\000\004\012\uffd3\001\002\000\052" +
    "\007\uffe8\010\uffe8\012\uffe8\016\uffe8\017\uffe8\022\uffe8\023" +
    "\uffe8\031\uffe8\032\060\033\062\035\uffe8\037\uffe8\040\uffe8" +
    "\042\065\043\057\045\064\046\055\047\063\050\056\051" +
    "\054\001\002\000\004\040\ufff7\001\002\000\042\004\045" +
    "\011\042\014\044\015\051\020\036\021\050\024\034\025" +
    "\040\026\043\034\052\035\uffcf\036\035\041\041\053\046" +
    "\054\037\055\033\001\002\000\040\004\045\011\042\014" +
    "\044\015\051\020\036\021\050\024\034\025\040\026\043" +
    "\034\052\036\035\041\041\053\046\054\037\055\033\001" +
    "\002\000\052\007\uffdd\010\uffdd\012\uffdd\016\uffdd\017\uffdd" +
    "\022\uffdd\023\uffdd\031\uffdd\032\060\033\062\035\uffdd\037" +
    "\uffdd\040\uffdd\042\065\043\057\045\064\046\055\047\063" +
    "\050\056\051\054\001\002\000\004\035\145\001\002\000" +
    "\052\007\uffda\010\uffda\012\uffda\016\uffda\017\uffda\022\uffda" +
    "\023\uffda\031\uffda\032\uffda\033\uffda\035\uffda\037\uffda\040" +
    "\uffda\042\uffda\043\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\001\002\000\026\022\147\032\060\033\062\042" +
    "\065\043\057\045\064\046\055\047\063\050\056\051\054" +
    "\001\002\000\004\053\150\001\002\000\004\030\151\001" +
    "\002\000\004\052\152\001\002\000\004\044\153\001\002" +
    "\000\040\004\045\011\042\014\044\015\051\020\036\021" +
    "\050\024\034\025\040\026\043\034\052\036\035\041\041" +
    "\053\046\054\037\055\033\001\002\000\026\032\060\033" +
    "\062\040\155\042\065\043\057\045\064\046\055\047\063" +
    "\050\056\051\054\001\002\000\006\005\uffd1\053\157\001" +
    "\002\000\004\005\166\001\002\000\004\030\160\001\002" +
    "\000\004\052\161\001\002\000\004\044\162\001\002\000" +
    "\040\004\045\011\042\014\044\015\051\020\036\021\050" +
    "\024\034\025\040\026\043\034\052\036\035\041\041\053" +
    "\046\054\037\055\033\001\002\000\026\032\060\033\062" +
    "\040\164\042\065\043\057\045\064\046\055\047\063\050" +
    "\056\051\054\001\002\000\006\005\uffd1\053\157\001\002" +
    "\000\004\005\uffd0\001\002\000\052\007\uffd7\010\uffd7\012" +
    "\uffd7\016\uffd7\017\uffd7\022\uffd7\023\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\035\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002\000\052" +
    "\007\uffe7\010\uffe7\012\uffe7\016\uffe7\017\uffe7\022\uffe7\023" +
    "\uffe7\031\uffe7\032\060\033\062\035\uffe7\037\uffe7\040\uffe7" +
    "\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\001\002\000\026\023\171\032\060\033\062\042\065" +
    "\043\057\045\064\046\055\047\063\050\056\051\054\001" +
    "\002\000\040\004\045\011\042\014\044\015\051\020\036" +
    "\021\050\024\034\025\040\026\043\034\052\036\035\041" +
    "\041\053\046\054\037\055\033\001\002\000\026\007\173" +
    "\032\060\033\062\042\065\043\057\045\064\046\055\047" +
    "\063\050\056\051\054\001\002\000\040\004\045\011\042" +
    "\014\044\015\051\020\036\021\050\024\034\025\040\026" +
    "\043\034\052\036\035\041\041\053\046\054\037\055\033" +
    "\001\002\000\026\010\175\032\060\033\062\042\065\043" +
    "\057\045\064\046\055\047\063\050\056\051\054\001\002" +
    "\000\052\007\uffdc\010\uffdc\012\uffdc\016\uffdc\017\uffdc\022" +
    "\uffdc\023\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\037\uffdc" +
    "\040\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\001\002\000\052\007\uffe6\010\uffe6\012\uffe6" +
    "\016\uffe6\017\uffe6\022\uffe6\023\uffe6\031\uffe6\032\060\033" +
    "\062\035\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\001\002\000\052\007" +
    "\uffe5\010\uffe5\012\uffe5\016\uffe5\017\uffe5\022\uffe5\023\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\035\uffe5\037\uffe5\040\uffe5\042" +
    "\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\001\002\000\004\037\204\001\002\000\026\032\060\033" +
    "\062\040\202\042\065\043\057\045\064\046\055\047\063" +
    "\050\056\051\054\001\002\000\042\004\045\011\042\014" +
    "\044\015\051\020\036\021\050\024\034\025\040\026\043" +
    "\034\052\036\035\037\uffcb\041\041\053\046\054\037\055" +
    "\033\001\002\000\004\037\uffca\001\002\000\052\007\uffed" +
    "\010\uffed\012\uffed\016\uffed\017\uffed\022\uffed\023\uffed\031" +
    "\uffed\032\uffed\033\uffed\035\uffed\037\uffed\040\uffed\042\uffed" +
    "\043\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\001" +
    "\002\000\026\016\206\032\060\033\062\042\065\043\057" +
    "\045\064\046\055\047\063\050\056\051\054\001\002\000" +
    "\040\004\045\011\042\014\044\015\051\020\036\021\050" +
    "\024\034\025\040\026\043\034\052\036\035\041\041\053" +
    "\046\054\037\055\033\001\002\000\026\017\210\032\060" +
    "\033\062\042\065\043\057\045\064\046\055\047\063\050" +
    "\056\051\054\001\002\000\052\007\uffdb\010\uffdb\012\uffdb" +
    "\016\uffdb\017\uffdb\022\uffdb\023\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\035\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\001\002\000\004\052" +
    "\212\001\002\000\006\031\ufff2\035\ufff2\001\002\000\004" +
    "\053\025\001\002\000\004\035\ufff3\001\002\000\006\031" +
    "\213\035\ufff1\001\002\000\004\035\ufff0\001\002\000\006" +
    "\027\220\040\ufff6\001\002\000\040\004\045\011\042\014" +
    "\044\015\051\020\036\021\050\024\034\025\040\026\043" +
    "\034\052\036\035\041\041\053\046\054\037\055\033\001" +
    "\002\000\026\032\060\033\062\040\ufff5\042\065\043\057" +
    "\045\064\046\055\047\063\050\056\051\054\001\002\000" +
    "\004\040\223\001\002\000\006\002\ufffc\006\ufffc\001\002" +
    "\000\006\037\ufffb\053\020\001\002\000\004\037\ufffa\001" +
    "\002\000\004\037\227\001\002\000\004\040\230\001\002" +
    "\000\006\002\ufffd\006\ufffd\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\006\003\230\004\004\001\001\000\002\001\001" +
    "\000\004\005\007\001\001\000\002\001\001\000\012\006" +
    "\225\007\015\010\020\011\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\016\007\015\010\020\011" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\025\014\023\001\001\000\004\015\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\046" +
    "\001\001\000\002\001\001\000\004\012\204\001\001\000" +
    "\006\012\200\016\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\175\001\001\000" +
    "\004\012\167\001\001\000\002\001\001\000\004\012\166" +
    "\001\001\000\004\012\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\136\001\001\000\002\001\001" +
    "\000\004\012\052\001\001\000\002\001\001\000\004\012" +
    "\112\001\001\000\004\012\111\001\001\000\004\012\110" +
    "\001\001\000\004\012\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\067\001\001" +
    "\000\004\012\066\001\001\000\004\012\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\075\020\074\001\001\000\002\001\001\000\004\017\076" +
    "\001\001\000\002\001\001\000\004\012\100\001\001\000" +
    "\004\017\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\075\020\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\121\001\001\000" +
    "\004\022\122\001\001\000\002\001\001\000\004\012\124" +
    "\001\001\000\002\001\001\000\004\012\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\132\001\001\000\002\001\001\000\004\012\134\001" +
    "\001\000\004\022\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\075\020\143\001" +
    "\001\000\004\012\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\153\001\001\000\002\001\001\000\004\021" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\162\001\001\000" +
    "\002\001\001\000\004\021\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\171\001\001\000\002\001\001\000\004\012\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\200\016\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\214\001\001\000\002\001\001" +
    "\000\004\015\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\224\007\015\010" +
    "\020\011\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  Lexer lexer;

  // the constructor taking the jflex-created lexer
  public parser (Lexer lexer) {
    this.lexer = lexer;
  }

  // printing errors with line and column numbers and
  // the error message
  public void report_error(String message, Object info) {

    StringBuffer m = new StringBuffer("Error"); 

    if (info instanceof java_cup.runtime.Symbol) { 
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info); 
      if (s.left >= 0) { 
        m.append(" in line " + (s.left+1)); 
        if (s.right > 0) 
          m.append(", column " + (s.right+1));
      }
    }

    m.append(" : "+message);

    System.err.println(m);
  }

  // if a fatal error is encountered, print it and exit the program
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exprs ::= expr SEMI exprs 
            {
              Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node es = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = ((Node)es).nodes;
      al.add( 0, (Node)e );
      RESULT = new Node( "", -1, al, true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*exprs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprs ::= expr SEMI 
            {
              Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e );
      RESULT = new Node( "", -1, al, true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*exprs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // params ::= COMMA expr params 
            {
              Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = ((Node)p).nodes;
      al.add( 0, ((Node)e) );
      RESULT = new Node( "", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(13/*params*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // params ::= 
            {
              Node RESULT = null;
		
      RESULT = new Node( "", -1, new ArrayList<Node>() );
    
              CUP$parser$result = new java_cup.runtime.Symbol(13/*params*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dispatch ::= expr params 
            {
              Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = ((Node)p).nodes;
      al.add( 0, (Node)e );
      RESULT = new Node( "argument", -1, al, true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*dispatch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dispatch ::= 
            {
              Node RESULT = null;
		
      RESULT = new Node( "", -1, new ArrayList<Node>(), true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*dispatch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // equations ::= IDENTIFIER COLON TYPE RARROW expr SEMI equations 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node q = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      Node questions = (Node)q;
      ArrayList<Node> ql = new ArrayList<Node>();
      ql.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      ql.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      ql.add( (Node)e );
      questions.nodes.add( 0, new Node( "", -1, ql ) );
      RESULT = questions;
    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*equations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // equations ::= 
            {
              Node RESULT = null;
		
      RESULT = new Node( "", -1, new ArrayList<Node>(), true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*equations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignments ::= COMMA IDENTIFIER COLON TYPE assignments 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      Node assigns = (Node)a;
      ArrayList<Node> nl = new ArrayList<Node>();
      nl.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      nl.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      assigns.nodes.add( 0, new Node( "let_binding_no_init", -1, nl ) );
      RESULT = assigns;
    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*assignments*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assignments ::= COMMA IDENTIFIER COLON TYPE LARROW expr assignments 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      Node assigns = (Node)a;
      ArrayList<Node> nl = new ArrayList<Node>();
      nl.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      nl.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      nl.add( (Node)e );
      assigns.nodes.add( 0, new Node( "let_binding_init", -1, nl ) );
      RESULT = assigns;
    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*assignments*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assignments ::= 
            {
              Node RESULT = null;
		
      RESULT = new Node( "", -1, new ArrayList<Node>(), true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*assignments*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= LET IDENTIFIER COLON TYPE assignments IN expr 
            {
              Node RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      Node assigns = (Node)a;
      ArrayList<Node> nl = new ArrayList<Node>();
      nl.add( new Node( "let_binding_no_init", -1, new ArrayList<Node>() ) );
      nl.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      nl.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      assigns.nodes.add( 0, new Node( "", -1, nl ) );
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( assigns );
      al.add( (Node)e );
      RESULT = new Node( "let", ((Token)l).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= LET IDENTIFIER COLON TYPE LARROW expr assignments IN expr 
            {
              Node RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      Node assigns = (Node)a;
      ArrayList<Node> nl = new ArrayList<Node>();
      nl.add( new Node( "let_binding_init", -1, new ArrayList<Node>() ) );
      nl.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      nl.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      nl.add( (Node)e1 );
      assigns.nodes.add( 0, new Node( "", -1, nl ) );
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( assigns );
      al.add( (Node)e2 );
      RESULT = new Node( "let", ((Token)l).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= CASE expr OF IDENTIFIER COLON TYPE RARROW expr SEMI equations ESAC 
            {
              Node RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node q = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      Node questions = (Node)q;
      ArrayList<Node> ql = new ArrayList<Node>();
      ql.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      ql.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      ql.add( (Node)e2 );
      questions.nodes.add( 0, new Node( "", -1, ql ) );
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( 0, (Node)e1 );
      al.add( questions );
      RESULT = new Node( "case", ((Node)e1).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr AT TYPE DOT IDENTIFIER LPAREN dispatch RPAREN 
            {
              Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e );
      al.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      al.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      al.add( (Node)d );
      RESULT = new Node( "static_dispatch", ((Node)e).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr DOT IDENTIFIER LPAREN dispatch RPAREN 
            {
              Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e );
      al.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      al.add( (Node)d );
      RESULT = new Node(
        "dynamic_dispatch", ((Node)e).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= IDENTIFIER LPAREN dispatch RPAREN 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( new Node((String)((Token)i).value,-1,new ArrayList<Node>() ) );
      al.add( (Node)d );
      RESULT = new Node( "self_dispatch", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= WHILE expr LOOP expr POOL 
            {
              Node RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e1 );
      al.add( (Node)e2 );
      RESULT = new Node( "while", ((Token)w).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( ((Node)e1) );
      al.add( ((Node)e2) );
      al.add( ((Node)e3) );
      RESULT = new Node( "if", ((Token)i).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= IDENTIFIER LARROW expr 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      al.add( (Node)e );
      RESULT = new Node( "assign", ((Token)a).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr EQUALS expr 
            {
              Node RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e1 );
      al.add( (Node)e2 );
      RESULT = new Node( "eq", ((Token)q).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr LE expr 
            {
              Node RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e1 );
      al.add( (Node)e2 );
      RESULT = new Node( "le", ((Token)l).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr LT expr 
            {
              Node RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e1 );
      al.add( (Node)e2 );
      RESULT = new Node( "lt", ((Token)l).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr DIVIDE expr 
            {
              Node RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e1 );
      al.add( (Node)e2 );
      RESULT = new Node( "divide", ((Token)d).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr TIMES expr 
            {
              Node RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e1 );
      al.add( (Node)e2 );
      RESULT = new Node( "times", ((Token)t).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr MINUS expr 
            {
              Node RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e1 );
      al.add( (Node)e2 );
      RESULT = new Node( "minus", ((Token)m).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr PLUS expr 
            {
              Node RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e1 );
      al.add( (Node)e2 );
      RESULT = new Node( "plus", ((Token)p).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= NEW TYPE 
            {
              Node RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( new Node( "new", ((Token)n).line, new ArrayList<Node>() ) );
      al.add( new Node((String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      RESULT = new Node( "constructor", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= TILDE expr 
            {
              Node RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e );
      RESULT = new Node( "negate", ((Token)t).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= ISVOID expr 
            {
              Node RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e );
      RESULT = new Node( "isvoid", ((Token)v).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= NOT expr 
            {
              Node RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e );
      RESULT = new Node( "not", ((Token)n).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= LPAREN expr RPAREN 
            {
              Node RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)e );
      RESULT = new Node( "paren", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= IDENTIFIER 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	ArrayList<Node> al = new ArrayList<Node>();
	al.add(new Node( (String)(((Token)i).value), ((Token)i).line,
          new ArrayList<Node>() ));
        RESULT = new Node( "identifier", ((Token)i).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= INT 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	ArrayList<Node> al = new ArrayList<Node>();
	al.add(new Node( String.valueOf(((Token)i).value), ((Token)i).line,
          new ArrayList<Node>() ));
        RESULT = new Node( "integer", ((Token)i).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= STR 
            {
              Node RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	ArrayList<Node> al = new ArrayList<Node>();
	al.add(new Node( (String)(((Token)s).value), ((Token)s).line,
          new ArrayList<Node>() ));
        RESULT = new Node( "string", ((Token)s).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= LBRACE exprs RBRACE 
            {
              Node RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<Node> el = new ArrayList<Node>();
      el.add( (Node)e );
      RESULT = new Node( "block", ((Token)b).line, el );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= FALSE 
            {
              Node RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	ArrayList<Node> al = new ArrayList<Node>();
	al.add(new Node( "0", ((Token)f).line,
          new ArrayList<Node>() ));
      RESULT = new Node( "bool", ((Token)f).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= TRUE 
            {
              Node RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	ArrayList<Node> al = new ArrayList<Node>();
	al.add(new Node( "1", ((Token)t).line,
          new ArrayList<Node>() ));
      RESULT = new Node( "bool", ((Token)t).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // follow_formal ::= COMMA formal follow_formal 
            {
              Node RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ff = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = ((Node)ff).nodes;
      al.add( 0, (Node)f );
      RESULT = new Node( "", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*follow_formal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // follow_formal ::= 
            {
              Node RESULT = null;
		
      RESULT = new Node( "", -1, new ArrayList<Node>() );
    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*follow_formal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal ::= IDENTIFIER COLON TYPE 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      al.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      RESULT = new Node( "", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*formal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formals ::= formal follow_formal 
            {
              Node RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ff = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = ((Node)ff).nodes;
      al.add( 0, (Node)f );
      RESULT = new Node( "", -1, al, true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*formals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formals ::= 
            {
              Node RESULT = null;
		
      RESULT = new Node( "", -1, new ArrayList<Node>(), true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*formals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // yes_init ::= IDENTIFIER COLON TYPE LARROW expr 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      al.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      al.add( (Node)e );
      RESULT = new Node( "", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*yes_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // no_init ::= IDENTIFIER COLON TYPE 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( new Node( (String)((Token)i).value, ((Token)i).line,
          new ArrayList<Node>() ) );
      al.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      RESULT = new Node( "", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*no_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE expr RBRACE 
            {
              Node RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      ArrayList<Node> fl = new ArrayList<Node>();
      fl.add( (Node)f );
      al.add( new Node( (String)((Token)i).value, ((Token)i).line, fl ) );
      al.add( new Node( (String)((Token)t).value, ((Token)t).line,
          new ArrayList<Node>() ) );
      al.add( (Node)e );
      RESULT = new Node( "method", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*feature*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= yes_init 
            {
              Node RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT = new Node( "attribute_init", -1, ((Node)f).nodes );
    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*feature*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature ::= no_init 
            {
              Node RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT = new Node( "attribute_no_init", -1, ((Node)f).nodes );
    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*feature*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // features ::= feature SEMI features 
            {
              Node RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node ff = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = ((Node)ff).nodes;
      al.add( 0,(Node)f );
      RESULT = new Node( "", -1, al, true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(4/*features*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // features ::= 
            {
              Node RESULT = null;
		
      RESULT = new Node( "", -1, new ArrayList<Node>(), true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(4/*features*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // follow_class ::= INHERITS TYPE LBRACE features RBRACE SEMI 
            {
              Node RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)f );
      RESULT = new Node( (String)((Token)t).value, ((Token)t).line, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(3/*follow_class*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // follow_class ::= LBRACE features RBRACE SEMI 
            {
              Node RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add((Node)f);
      RESULT = new Node( "no_inherits", -1, al );
    
              CUP$parser$result = new java_cup.runtime.Symbol(3/*follow_class*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cool_class ::= CLASS TYPE follow_class 
            {
              Node RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)f );
      if ( ((Node)f).name != "no_inherits" ) {
        RESULT=new Node( (String)((Token)t).value, ((Token)t).line, al );
      } else {
        RESULT=new Node( (String)((Token)t).value, ((Token)t).line, al );
      }
    
              CUP$parser$result = new java_cup.runtime.Symbol(2/*cool_class*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= cool_class 
            {
              Node RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = new ArrayList<Node>();
      al.add( (Node)c );
      RESULT = new Node( "", -1, al, true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= cool_class program 
            {
              Node RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      ArrayList<Node> al = ((Node)p).nodes;
      al.add( 0, (Node)c );
      RESULT = new Node( "", -1, al, true );
    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

